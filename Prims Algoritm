#define infinity 9999
#define MAX 20
#include<conio.h>
#include<iostream>
#include<stdlib.h>
using namespace std;
class graph
{
int G[MAX][MAX];
int n;
public:
graph()
{
n=0;
}
void readgraph();
void printgraph();
int prims(graph&);
};
void graph::readgraph()
{
int i,j,vi,vj,no_of_edges,wt;
cout<<"\n Enter the number of the vertices:";
cin>>n;
cout<<"\n Enter the number of the edges:";
cin>>no_of_edges;
for(i=0;i<n;i++)
for(j=0;j<n;j++)
 G[i][j]=0;
cout<<"\n Enter the list of edges:";
for(i=0;i<no_of_edges;i++)
{
cout<<"\n Number of edges:";
cin>>vi>>vj>>wt;
G[vi][vj]=G[vj][vi]=wt;
}
}
void graph::printgraph()
{
int i,j;
cout<<"\nlist of the int spanning tree:";
for(i=0;i<n-1;i++)
 for(j=i+1;j<n;j++)
 if(G[i][j]!=0)
cout<<"\n(u,v,wt)=("<<i<<","<<j<<","<<G[i][j]<<")";
}
int graph::prims(graph&spanning)
{
int cost[MAX][MAX];
int u,v,min_distance,distance[MAX],from[MAX];
int visited[MAX],no_of_edges,min_cost;
int i,j;
for(i=0;i<n;i++)
 for(j=0;j<n;j++)
 {
 if(G[i][j]==0)
 cost[i][j]=infinity;
 else
 cost[i][j]=G[i][j];
 spanning.G[i][j]=0;
 }
distance[0]=0;visited[0]=1;
for(i=1;i<n;i++)
{
distance[i]=cost[0][i];
from[i]=0;
visited[i]=0;
}
min_cost=0;
no_of_edges=n-1;
while(no_of_edges>0)
{
min_distance=infinity;
for(i=1;i<n;i++)
 if(visited[i]==0&&distance[i]<min_distance)
 {
 v=i;
 min_distance=distance[i];
 }
u=from[v];
 
 spanning.G[u][v]=distance[v];
 spanning.G[v][u]=distance[v];
 no_of_edges--;
 visited[v]=1;
 for(i=1;i<n;i++)
 if(visited[i]==0&&cost[i][v]<distance[i])
 {
 distance[i]=cost[i][v];
 from[i]=v;
}
min_cost=min_cost+cost[u][v];
}
spanning.n=n;
return(min_cost);
}
int main()
{
graph g,spanning;
g.readgraph();
int total_cost=g.prims(spanning);
cout<<"\n spanning tree matrix:";
spanning.printgraph();
cout<<"\n total cost of the spanning tree:"<<total_cost;
return 0;
}
